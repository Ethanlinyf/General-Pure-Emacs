#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Pure Emacs Tutorial
#+date: <2022-06-15 Wed>
#+author: Dr YF Lin
#+email: e.yflin@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.1 (Org mode 9.5.2)
#+cite_export:
#+startup:overview

#+begin_quote
"Something good, from sand to a tower with spiral evolution and from the tower
to dust in your universe being as you wish to be" – Dr YF Lin
#+end_quote

* Summary
The tutorial is to demonstrate how this Emacs editor is customised. We pursume a
simple, integrated and efficient platform with limited packages, around
100 as a pure Emacs to be using for learning/teaching, research and project
management.

Copyleft Declaration:
#+begin_src emacs-lisp
;; Copyleft (CL) 2018-2028 YF Lin
;;
;; Something good as indicated, by Dr YF Lin <e.yflin@gmail.com>
;; URL: https://github.com/Ethanlinyf/PureEmacs
;; Under ThingsEngine Project: https://www.thethingsengine.org
#+end_src

* Introduction
- General Pure Emacs \\
  EMACS, Editing Macros, is an extensible and real-time display editor written
  in a programming language called Elisp. With (< 100) packages for Emacs, we
  are developing *General Pure Emacs* as an simple and integrated platform to facilitate
  learning, teachng, research and project management. This development as a
  repository is shared through GitHub, as well as with a tutorial also published through
  the ThingsEngine websit: Https://www.thethingsengine.org.
- Elisp \\
- Order \\
* Installation
- Run M-x all-the-icons-install-fonts to install the needed fonts and icons.
** Mac
- Install coreutils
  The GNU Core Utilities are the basic file, shell and text manipulation
  utilities of the GNU operating system. These are the core utilities which are
  expected to exist on every operating system.
  #+begin_src shell
    brew install coreutils
  #+end_src

- Update the path:
  #+begin_src shell
    # Make all GNU flavor commands available, may override same-name BSD flavor commands
    # For x86 Mac
    export PATH="/usr/local/opt/coreutils/libexec/gnubin:${PATH}"
    export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:${MANPATH}"

    # For M1 Mac
    export PATH="/opt/homebrew/opt/coreutils/libexec/gnubin:${PATH}"
    export MANPATH="/opt/homebrew/opt/coreutils/libexec/gnuman:${MANPATH}"
  #+end_src

- Restore Access to File System for Emacs
  Add Emacs and ruby to Accessibility, Full Disk Access, Files and Folders: \\
  https://mymac.info/post/restore-access-to-file-system-for-emacs-on-macos-catalina \\
  https://emacs.stackexchange.com/questions/53026/how-to-restore-file-system-access-in-macos-catalina/53037#53037

  Emacs.app actually launches using a ruby script. As a result, MacOS
  Catalina/Monterey uses the permissions set for ruby, not the permissions for
  Emacs.app. Solved the problem by granting Full Disk Access to /usr/bin/ruby

  Grant access as follows.

  + Go to "System Preferences -> Security & Privacy -> Privacy"
  + Select Full Disk Access from the left menu. It is about half way down in the
    menu. A list of apps will appear in the main region of the window.
  + Click the lock on the lower left and authenticate in order to allow making
    changes.
  + Click the + button under the list of software and select /usr/bin/ruby.
    /usr is usually a hidden folder and may not appear by default. If so, press
    shift+cmd+. (the last one is a dot) at the root directory to make it appear.

  Emacs.app should now be able to access the file system without any hindrance.

  The standard emacs supplied with the system is run through Terminal.app. If
  you're using emacs like this (with the system supplied or for example an
  installation from HomeBrew or MacPorts), you need to drag Terminal.app on to
  the list to give access.

  If you're using a third party GUI-based Emacs, you'll need to drag the .app
  for that program on to the list.

  Note that some Emacs "distributions" package together a number of Emacs
  binaries for various macOS versions in a single folder, and dynamically at
  runtime chooses the right one for your system. This means that the icon you
  click to start the program is really a "placeholder" that is not Emacs itself,
  but rather just starts up Emacs. This "placeholder" often takes the form of a
  Ruby script. If this is the case, you'll need to drag the Ruby program on to
  the list.

  Ruby comes with macOS by default. You can find the program by opening Finder,
  and then from the "Go" menu choose "Go to Folder". Enter "/usr/bin" and you'll
  get that folder opened in Finder. In the folder, you'll find the ruby program
  that you can drag on to the Full Disk Access list.
* Key Remapping
1. M(eta): option (Mac)，left windows (Windows)
2. s(uper): command (Mac)，left Alt (Windows)
3. S(Shift): no need to change
4. C(left-Ctrl): Caps Lock
** Windows: SharpKeys
- How to open with Emacs in Windows\\
  Windows Registry Editor Version 5.00
  #+begin_quote
  [HKEY_CLASSES_ROOT\*\shell]
  [HKEY_CLASSES_ROOT\*\shell\openwemacs]
  @="&Edit with Emacs"
  [HKEY_CLASSES_ROOT\*\shell\openwemacs\command]
  @="C:\\emax64\\bin\\emacsclientw.exe -n \"%1\""
  [HKEY_CLASSES_ROOT\Directory\shell\openwemacs]
  @="Edit &with Emacs"
  [HKEY_CLASSES_ROOT\Directory\shell\openwemacs\command]
  @="C:\\emax64\\bin\\emacsclientw.exe -n \"%1\""
  #+end_quote

  And Emacs should be available on server-mode
  #+begin_src emacs-lisp
    (server-mode 1)
  #+end_src
** Mac:
  #+begin_src emacs-lisp
    (setq mac-option-modifier 'meta
      mac-command-modifier 'super)
  #+end_src

  #+begin_src emacs-lisp
    (global-set-key (kbd "s-a") 'mark-whole-buffer)
    (global-set-key (kbd "s-c") 'kill-ring-save)
    (global-set-key (kbd "s-s") 'save-buffer)
    (global-set-key (kbd "s-v") 'yank)
    (global-set-key (kbd "s-z") 'undo)
    (global-set-key (kbd "s-x") 'kill-region)
  #+end_src
* Loading Sequence
** early-init.el
- Development with debugging \\
  In this development, the configurations will continuously be optimized. When a
  lisp error happens during Emacs running, the debuger can be called to
  investigate immediate causes of this error.

  Set the variable debug-on-error to non-nil make errors to enter the debugger.

  #+begin_src emacs-lisp
    (setq debug-on-error t)
  #+end_src

  If Emacs is not able to open, you can run Emacs in a terminal with an option ‘--debug-init’ to catch the
  errors that may happens when loading of the init settings.

  To make the configuration effective without rebooting Emacs:
  + M-x load-file
  + M-x eval-buffer
  + C-x C-e
- The minimum required version of Emacs \\
  + how to check the version of Emacs?
     #+begin_src emacs-lisp
       (emacs-version)
     #+end_src

    This command returns the version description of Emacs that is running. It is
    useful in bug reports. For example, "GNU Emacs 28.1 (build 1,
    aarch64-apple-darwin21.4.0, NS appkit-2113.40 Version 12.3.1 (Build 21E258))
    of 2022-06-06"

    You could use "emacs-major-version" and "emacs-minor-version" to indicate
    the major and minor version of Emacs.

  + Specify the minimum required version of Emacs for this configuration
    #+begin_src emacs-lisp
      (let ((minver "27.1"))
      (when (version< emacs-version minver)
        (error "Puremacs requires V%s or higher versions." minver)))
    #+end_src

    Puremacs is compatible from the emacs version 27.1. However, the development
    is based on 28.1.
- Optimizing Emacs Startup
  + "benchmark-init"
    The [[https://www.emacswiki.org/emacs/BenchmarkInit][benchmark-init]] can be use to indicate where Emacs will spend time during
    startup.

    benchmark-init can help to record the duration spent in ‘require’ and ‘load’
    when emacs is runnning to laod modulesearly on in the init file. And each
    Emacs module will be essentially benchmarked as a tabular format or as a
    tree based on the origin of the recorded operations.

    See the repository in the GitHub: https://github.com/dholm/benchmark-init-el
    And an example below:
    | Module                       | Type    | ms [^] | total ms |
    |------------------------------+---------+--------+----------|
    | eldoc-eval                   | require |    200 |      200 |
    | eldoc                        | require |    188 |      188 |
    | ispell                       | require |     20 |       20 |
    | grep                         | require |      9 |        9 |
    | ~/.emacs.d/benchmark-init.el | load    |      1 |        1 |
  + Speed up Emacs at the startup
    * Set the parameters for the gabbage collections
      #+begin_src emacs-lisp
      (setq gc-cons-threshold most-positive-fixnum) ;; AT startup
      (add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold 800000))) ;; after startup
      #+end_src

    * enable heavy modes after init
      For example
      #+begin_src emacs-lisp
        (add-hook 'after-init-hook 'gloable-company-mode)
      #+end_src

    * disable case-insensitive search
      #+begin_src emacs-lisp
        (setq package-enable-at-startup nil)
      #+end_src

    * Save time by skipping the mtime checks on *.els files
      #+begin_src emacs-lisp
        (setq load-prefer-newer noninteractive)
      #+end_src

    * Prevent premature redisplays
      #+begin_src emacs-lisp
        (setq-default inhibit-redisplay t
                      inhibit-message t)
        (add-hook 'window-setup-hook
                  (lambda ()
                    (setq-default inhibit-redisplay nil
                                  inhibit-message nil)
                    (redisplay)))
      #+end_src

    * Suppress a second case-insensitive search
      #+begin_src emacs-lisp
        (setq auto-mode-case-fold nil)
      #+end_src

    * Disable package at startup
      #+begin_src emacs-lisp
        (setq package-enable-at-startup nil)
      #+end_src

    * Prevent resising the fram at early stage
      #+begin_src emacs-lisp
        (setq frame-inhibit-implied-resize t)
      #+end_src

- Specify the system default coding as "UTF-8"
   #+begin_src emacs-lisp
     (set-language-environment "UTF-8")
   #+end_src

** custom.el
You can configure Emacs through its interface, for example:
[[./site-lisp/figure/font_setting.png]]\\
The settings are generated and recorded in a customised file, which could be set
as follows:
 #+begin_src emacs-lisp
   (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
   (when (file-exists-p custom-file)
     (load custom-file))
 #+end_src
** macro.el
Emacs has a feature using macro to enhance performance. You can create a
sequence of actions as a macro to perform when needed.

Next, we talk about how to create a macro when using Emacs.

The Steps to create a macro Record and Play inside Emacs:
- Start recording a macro by pressing ctrl+x (
- Perform any actions inside the Emacs editor that you would like to record.
- Stop recording by pressing ctrl+x )
- Play the last recorded macro by pressing ctrl+x e

You can also name a macro to persist:
- Press Ctrl+x Ctrl+k n
- Give name-of-macro, and press ENTER
- Run the named macro by pressing, M-x name-of-macro


Here is an example how to perform record and play a sequence of actions inside
the puremacs.

"Example: Title case first word in each bullet points
Let us take the following text snippet as an example.

$ cat thegeekstuff.txt
        * virtualization technologies
        * sed and awk tips/tricks
        * emacs tutorials
        * bash scripting tutorial series
1. Open the thegeekstuff.txt that has the bullet points
Open the above sample text file, and by default the cursor will be placed in the first line.

$ emacs -nw thegeekstuff.txt
        * virtualization technologies
        * sed and awk tips/tricks
        * emacs tutorials
        * bash scripting tutorial series
2. Start the Recording
Type: Ctrl+x (

Ctrl+x ( indicates start the recording
When you do Ctrl+x (, it will display Defining kbd macro .. at the bottom of screen.
3. Change the case of next
Type: M-c

Press M-c which will title case the next word, and places the cursor after the word.
4. Go to the next line
Type: C-n

Press C-n which will move the cursor to the next line.
Refer our earlier article 7 Essential emacs Editor Navigation Fundamentals.
5. Go to the start of line
Type: C-a

Press C-a which will move the cursor to the starting of the line.
6. Stop recording the macro
Type: C-x )

Ctrl+x ) indicates stop the recording
When you do Ctrl+x ), it will display Keyboard macro defined in the bottom of screen.
7. Give name and save macro
Type: C-x C-k n title-case-macro

Ctrl+x Ctrl+k n indicates name the previous macro
When you do Ctrl+x Ctrl+k n, it will ask ‘Name for last kbd macro:’ (enter the name you require). I am naming it as title-case-macro.
8. Execute the macro for required number of times
Type: M-x title-case-macro

M-x title-case-macro indicates execute the macro which is stored with that name.
To repeat the macro, just prepend the macro with C-u and count.

Type: C-u 3 M-x title-case-macro

C-u N indicates N number of times
M-x title-case-macro indicates execute the macro which is stored with that name.
So, now all your four lines are title cased, as shown below.

        * Virtualization technologies
        * Sed and awk tips/tricks
        * Emacs tutorials
        * Bash scripting tutorial series
By default, emacs macro will not be available for further sessions.

Saving the macro in .emacs for future session
After you have named the macro,

open the ~/.emacs file in another buffer ( from same session — do C-x C-f & open ~/.emacs file )
insert the macro by, Type: M-x insert-kbd-macro, which will ask you the name of macro to insert.
Give the name with which you have saved already ( in this example it is title-case-macro ), which will insert some lisp code.
Save, and exit. In all your future session you will be able to access this macro by M-x macroname."

** DONE init.el
DEADLINE: <2022-07-01 Fri> SCHEDULED: <2022-06-27 Mon>
- State "DONE"       from "NEXT"       [2022-06-25 Sat 14:58]
What is init File?
Emacs has a init file, which contains initial configuration emacs loads when it starts up. It is used to initially customize emacs.

Where is the Emacs init file?
By default, there is no init file. You can create the file with the initial customised configuration. For example:

#+begin_src emacs-lisp
  (setq initial-major-mode 'emacs-lisp-mode ;;'fundamental-mode
      package--init-file-ensured t)
#+end_src

When Emacs is started, it normally tries to load a Lisp program from an
initialization file, or init file for short. This file, if it exists, specifies
how to initialize Emacs for you. Traditionally, file ~/.emacs is used as the
init file, although Emacs also looks at ~/.emacs.el, ~/.emacs.d/init.el,
~/.config/emacs/init.el(supported since emacs 27.1, released in 2020.), or other
locations you could specify it: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html][How Emacs find your init file]].

So, on macOS, emacs is looking for init file when starting up in the following filepath, in order:

~/.emacs
~/.emacs.el
~/.emacs.d/init.el (version)
~/.config/emacs/init.el

- Disable to try second pass through `auto-mode-alist'
  auto-mode-case-fold is a variable defined in `files.el'. Its value is "t".
  "Non-nil means to try second pass through `auto-mode-alist'.
  This means that if the first case-sensitive search through the alist fails to
  find a matching major mode, a second case-insensitive search is made On
  systems with case-insensitive file names, this variable is ignored, since only
  a single case-insensitive search through the alist is made."

  customize this variable as "nil" wil speed up Emacs startup.
- handle the file name to speed up Emacs
  The variable "file-name-handler-alist" holds a list of handlers, together with
  regular expressions that determine when to apply each handler. Each element
  has this form:
  #+begin_src emacs-lisp
    (regexp . handler)
  #+end_src

  The settings in this Pure Emacs:
  #+begin_src emacs-lisp
    (unless (or (daemonp) noninteractive init-file-debug)
      (let ((old-file-name-handler-alist file-name-handler-alist))
        (setq file-name-handler-alist nil)
        (add-hook 'emacs-startup-hook
                  (lambda ()
                    "Recover file name handlers."
                    (setq file-name-handler-alist
                          (delete-dups (append file-name-handler-alist
                                               old-file-name-handler-alist)))))))
  #+end_src
- Reset the garage collection parameter.
  Reset the parameters for the garage collections:
  #+begin_src emacs-lisp
    (add-hook 'emacs-startup-hook
          (lambda ()
            "Recover GC values after startup."
            (setq gc-cons-threshold 80000000
                  gc-cons-percentage 0.1)))
  #+end_src
  To make sure Pure Emacs can be maintained when it is running.
- Statistic results on the time of startup and garage collections.
  The starup time and the number of gabbage collections will be indicated in the
  Dashboard, see below:
  [[./site-lisp/figure/startupTime&GCs.png]]

  #+begin_src emacs-lisp
    (add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract
                               after-init-time before-init-time)))
                     gcs-done)))
  #+end_src
- Set a major mode for scratch
  Here, we set the defal major mode as emacs-lisp-mode for elisp practices.
  #+begin_src emacs-lisp
    (setq initial-major-mode 'emacs-lisp-mode) ;;'fundamental-mode
  #+end_src

  The default major mode is fundamental-mode and it is inheritated by Dashboard as dashboard-mode.
- Loading customised and macro files
  Load the settings recorded through emacs if existing
  #+begin_src emacs-lisp
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
      (when (file-exists-p custom-file)
      (load custom-file))
  #+end_src

  Define a file to record emacs macros.
  #+begin_src emacs-lisp
    (defvar pure-macro (expand-file-name "macros.el" user-emacs-directory)
      "A file to record emacs macros.")
  #+end_src
  Load the macro file if it exists
  #+begin_src emacs-lisp
    (when (file-exists-p pure-macro)
      (load pure-macro))
  #+end_src

- Update load path
  Add to list to load the el files in a specific folder;
  #+begin_src emacs-lisp
    (defun update-load-pathe (&rest _)
      "To load folders includ el files."
      (dolist (path '("lisp" "site-lisp"))
        (push (expand-file-name path user-emacs-directory) load-path)))
    (update-load-pathe)
  #+end_src
- What need to be required
  + init-a-engine
  + init-b-basic
  + init-c-minibuffer
  + init-d-dired
  + init-e-enhance
  + init-f-platform
  + init-g-interface
  + init-h-dashboard
  + init-i-org
  + init-i-roam
  + init-i-tex
  + init-i-python
  + init-i-julia
  + init-i-lua
  + init-z-test

** TODO lisp
*** init-a-abbr.el
Emacs has a good feature to expand abbrivations.
- why we need abbrevs \\
  It is convenient to input some repeated phrases, such as your emails, urls and
  so on. It is also helpful to fix typos by defining abbreviations for these to
  be corrected automatically.
- How to enable abbrev-mode \\
  #+begin_src emacs-lisp
    (setq-default abbrev-mode t)
  #+end_src

  Emacs will offer to save abbrevs automatically if you have changed any of
  them, whenever it offers to save all files (for C-x s or C-x C-c). It saves
  them in the file specified by abbrev-file-name. This feature can be inhibited
  by setting the variable save-abbrevs to nil; setting it to silently will save
  the abbrevs automatically without asking.

  #+begin_src emacs-lisp
    (setq save-abbrevs nil)
  #+end_src

  How to define the abbrev items? See the following example:
  #+begin_src emacs-lisp
    (define-abbrev-table 'global-abbrev-table '(
                                                ;; example 1
                                                ("exp1" "xxx")
                                                ;; Tudi
                                                ("exp2" "AAA")
                                                ("eline" ";;--------------------------------------------------------------------")
                                                ))
  #+end_src



- how to set an abbrev
*** init-b-basic.el
Some basic settings are included in this elisp file, as well as the const and custom defaults.
**** init-const.el
**** init-custom.el
*** init-c-package.el
*** init-d-enhance.el
*** init-e-dired.el
*** init-e-tracemacs.el
*** init-e-ui.el
*** init-f-dashboard.el
*** init-g-yasnippet.el
*** init-h-lsp.el
*** init-i-org.el
*** init-i-python.el
*** init-i-roam.el
*** init-i-tex.el
*** init-s-special.el
*** init-x-extra.el
*** init-z-test.el
** site-lisp
*** aweshell
*** awesome-tab
*** lsp-bridge
*** word-completion
*** Own development
- init-j-purefunction.el

** Org
- org-super-agenda
  https://github.com/alphapapa/org-super-agenda
- org-noter
-

* Reference
1. [[zotero://select/items/1_Y6L4QMKZ][“Gnu.Org.” Accessed June 16, 2022. https://www.gnu.org/software/emacs/manual/html_node/elisp/Error-Debugging.html.]]
2. [[zotero://select/items/1_MAW49NXR][“EmacsWiki: Optimizing Emacs Startup.” Accessed June 17, 2022. https://www.emacswiki.org/emacs/OptimizingEmacsStartup.]]
3. [[zotero://select/items/1_XC55BTU4][Doom Emacs. Emacs Lisp. 2014. Reprint, Doom Emacs, 2022. https://github.com/doomemacs/doomemacs.]]
4. [[zotero://select/items/1_2Y87WF4Q][“Gnu.Org: Making Certain File Names ‘Magic.’” Accessed June 24, 2022. https://www.gnu.org/software/emacs/manual/html_node/elisp/Magic-File-Names.html.]]
5. [[zotero://select/items/1_5IBL5GJ8][“EmacsWiki: Abbrev Mode.” Accessed August 5, 2022. https://www.emacswiki.org/emacs/AbbrevMode.]]

